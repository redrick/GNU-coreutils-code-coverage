== GNU coreutils code coverage

As a part of bachelors degree theses I am working with this coverage data and it was quiet an adventure to get them with no knowledge of this kind of stuff at all as me, so I am sharing with you not just the results of my adventure, but also I will tell you how to do all the stuff.

== Info

my preparation can be found in this gist, but I will digg more into it here: 

  https://gist.github.com/1335909

The gist is not going to be updated anymore!

So all the stuff I was doing i did on my Alienware m11x in combination with fedora (and here is something about my fedora):
Linux redrick.fedora 2.6.41.1-1.fc15.i686 #1 SMP Fri Nov 11 21:50:36 UTC 2011 i686 i686 i386 GNU/Linux

== Prerequisities

we need to digg into README-prereq, because I did not have most of those utilities, with one small change as described in my other gist:
  
  https://gist.github.com/1273797

I suppose you have done it successfully, so just those of you not familiar with git can look into HACKING one

For me there were some things that were not in my system and were essential for tests to run, so just brief commands to install all those things:

  sudo yum install valgrind valgrind-devel

  sudo yum install python-inotify

  sudo yum install perl-Expect expect expect-devel expectk perl-Test-Expect

  sudo yum install strace

OK and now when we have all this done, lets get the things we want out of it.

== How to

Now I am going to guide you through the process of creating such coverage data from coreutils project, I am adding some comments where they are essential or I need them for myself, others are just a bunch of bash commands... 

First you need to get the coreutils like this 
  
  git clone git://git.savannah.gnu.org/coreutils.git

  cd coreutils

  ./bootstrap

  ./configure

  make

  make check

And now once more run configure with these flags:
  
  ./configure CFLAGS="-fprofile-arcs -ftest-coverage"

  make

to get out the most out of it I did these steps in this order (I am not really sure if it was reallly necesssary, but it worked)
(beacause i want most tests to be run and those expensive/very expensive are disabled by default I had to do this)
  
  env RUN_EXPENSIVE_TESTS=yes RUN_VERY_EXPENSIVE_TESTS=yes make check

now I am gathering data with lcov, to be able to generate some nice visualization of the coverage
  
  lcov -c -o coverage_src.info -d src -b src
  lcov -c -o coverage_lib.info -d lib -b lib

and now generate the html output
  
  genhtml coverage_src.info coverage_lib.info -o coverage --branch-coverage

this time tests which want root privilegues were not run, therefore lets do it once more with root this time
(this time without expensive tests, those were run without root just fine)
  
  sudo make check

now I am gathering data with lcov, to be able to generate some nice visualization of the coverage
  
  lcov -c -o coverage_src.info -d src -b src
  lcov -c -o coverage_lib.info -d lib -b lib

and now generate the html output
  
  genhtml -p 'pwd' -t coreutils -o coverage *.info

  cd coverage

  firefox index.html

And firefox will open your results for you and we are done :)

== Used software/utilities

=== GNU coreutils

The GNU Core Utilities are the basic file, shell and text manipulation utilities of the GNU operating system. These are the core utilities which are expected to exist on every operating system.

Previously these utilities were offered as three individual sets of GNU utilities, Fileutils, Shellutils, and Textutils. Those three have been combined into a single set of utilities called Coreutils.

  http://www.gnu.org/s/coreutils/

=== GIT

Git is a free & open source, distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Every Git clone is a full-fledged repository with complete history and full revision tracking capabilities, not dependent on network access or a central server. Branching and merging are fast and easy to do.

Git is used for version control of files, much like tools such as Mercurial, Bazaar, Subversion, CVS, Perforce, and Team Foundation Server.

  http://git-scm.com/

=== LCOV

LCOV is a graphical front-end for GCC's coverage testing tool gcov. It collects gcov data for multiple source files and creates HTML pages containing the source code annotated with coverage information. It also adds overview pages for easy navigation within the file structure. LCOV supports statement, function and branch coverage measurement.

  http://ltp.sourceforge.net/coverage/lcov.php

=== GENHTML

Create an HTML view of coverage data found in tracefile. Note that tracefile may also be a list of filenames.

  http://ltp.sourceforge.net/coverage/lcov/genhtml.1.php

== Sources
  
* http://stackoverflow.com/questions/4844188/c-using-gcov-and-lcov-problem
* http://stackoverflow.com/questions/4412709/how-do-i-tell-lcov-where-to-find-my-cpp-h-files
* https://gist.github.com/1197309
* http://ltp.cvs.sourceforge.net/viewvc/ltp/utils/?pathrev=HEAD
* http://old.nabble.com/-Ltp-coverage--lcov-problem,-cannot-open-source-file-td29599757.html
* http://www.linuxfromscratch.org/lfs/build-logs/6.5/078-coreutils

== Thanks

* Ondrej Vasik
* Marek Grac
* Uncle Google